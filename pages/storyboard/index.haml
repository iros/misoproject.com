- @page_title = "The Miso Project :: Storyboard"
- @layout = "storyboard"


%article.storyboard
  %section.intro
    %div.left
      %img{ :src => '/images/storyboard.png' }
      %p
        Storyboard is a JavaScript library for managing the flow of interactive content and general
        application control flow logic.
    %div.download
      %h2
        Download
        %a{ :href => 'https://github.com/misoproject/storyboard/' }
          0.0.1 alpha

      %a.button{ :href => 'https://github.com/downloads/misoproject/storyboard/miso.storyboard.0.0.1.js', :onclick => "_gaq.push(['_trackEvent', 'Miso.Storyboard', 'Downloads', 'Unminified, No Dependencies']);" }
        &darr; development
      %a.button{ :href => 'https://github.com/downloads/misoproject/storyboard/miso.storyboard.min.0.0.1.js', :onclick => "_gaq.push(['_trackEvent', 'Miso.Storyboard', 'Downloads', 'Minified, No Dependencies']);" }
        &darr; production (minified)
      %a.button{ :href => 'https://github.com/downloads/misoproject/storyboard/miso.storyboard.deps.0.0.1.js', :onclick => "_gaq.push(['_trackEvent', 'Miso.Storyboard', 'Downloads', 'Unminified, With Dependencies']);" }
        &darr; development with dependencies
      %a.button{ :href => 'https://github.com/downloads/misoproject/storyboard/miso.storyboard.deps.min.0.0.1.js', :onclick => "_gaq.push(['_trackEvent', 'Miso.Storyboard', 'Downloads', 'Minified, With Dependencies']);" }
        &darr; production with dependencies (minified)


  %section.quickstart
    %div.left
      %p
        When creating interactive content, managing transitions and different states of an application can become a challenge.
        This often results in either highly event-driven code or a spaghetti monster.
      %p
        Storyboard.js is a tiny library that allows one to define scenes and then define entry and exit methods for each scenes. As the application progresses
        based on user actions or a predefined flow, the entry and exit functions execute in accordance with the switching of scenes.
      %p
        For those familiar with state machines, Storyboard.js aims to be a lightweight state machine, in that it does not have restrictions on where one comes from or goes to.
      %p
        Using deferreds, Storyboard.js provides an abstraction that makes managing asynchronous animations, remote requests and transitions
        easier and more readable.
      %p
        Follow along for releases &amp; announcements at <a href="http://www.twitter.com/themisoproject">@themisoproject</a>

    :plain
      <style type="text/css">

      </style>
    %div#demoblock{ :style => 'float: left; width: 34.5em; margin-bottom:10px;'}
    :plain
      <script type="text/javascript">
        function makeOrangeBox() {
          var box = $('<div>', { className : 'demoBox' }).css({
            display : 'none',
            width : '50px',
            height : '50px',
            float : 'left',
            margin: 4,
            backgroundColor : 'orange',
            position : 'relative'
          });
          return box;
        }
      </script>
      <style>
        .ace-result {
          display:none;
        }
      </style>
    = toRunnableCodeBlock("storyboard/examples/quickstart.js", nil, { :autorun => false })
