- @page_title = "The Miso Project :: Dataset :: Tutorals"
- @layout = "dataset"

%article.dataset
  %section.tutorial
    %h2
      Accessing Data

    %p
      There are several ways in which your data is made available once in Dataset.
      Specifically all these ways fall into the following categories:

    %h3 Direct Access
    %p
      The following methods allow you to have access to parts of Dataset directly - as in, you can directly
      interface with the objects that make up your Dataset instance. While convenient, if you change the data in a matter
      other than the one specified, you can create inconsistancies in our index.

    %div.indent-1
      %p
        The methods that give you direct access are:

        %ul
          %li
            %a{ :href => '/dataset/api/Miso.Dataset.DataView.html#column' }
              <code>ds.column(name)</code>
            %br
            This returns the actual column object. Note that because the order of columns
            is not guaranteed (or should matter,) the fetching of columns is always done by name.

          %li
            <code>col.data</code>
            %br
            After fetching a column using <code>ds.column(name)</code>, you can get a hold of the data in it
            directly by referencing the <code>data</code> array. This is NOT recommended as all updates should go
            through the add/remove/update methods.
          %li
            <code>col.name</code>
            %br
            After fetching a column using <code>ds.column(name)</code>, you can get a hold of the column name directly.
          %li
            <code>col.type</code>
            %br
            After fetching a column using <code>ds.column(name)</code>, you can get a hold of the column name directly.



    %h3 Indirect Access
    %p
      The following methods give you access to the content, but it is first separated form the actual Dataset. This is
      for two reasons: First, because 'rows' are a more logical interaction unit it makes more sense to provide an API
      that can access data in this way. Because we don't actually store the data in this way, we have to make the row
      objects. The actual data is stored in column arrays and is only tied together by position.

    %div.indent-1
      %p
        The methods that give you indirect access are:

        %ul
          %li
            %a{ :href => '/dataset/api/Miso.Dataset.html#columnNames' }
              <code>ds.columnNames()</code>
            %br
            Returns an array of column names.

          %li
            %a{ :href => '/dataset/api/Miso.Dataset.html#rowByPosition' }
              <code>ds.rowByPosition(pos)</code>
            %br
            To get the Nth row in your dataset, just pass the position into rowByPosition. An object representing
            the row will be returned.
          %li
            %a{ :href => '/dataset/api/Miso.Dataset.html#rowById' }
              <code>ds.rowById(id)</code>
            %br
            To get the row with a specfic _id value. An object representing
            the row will be returned. Note, the _id value is an auto generated value and should
            never be changed.
          %li
            %a{ :href => '/dataset/api/Miso.Dataset.html#each' }
              <code>ds.each(iterator, context)</code>
            %br
            Iterates over all rows.
            :plain
              <pre>
              ds.each(function(row, rowIndex) {
                // do what you need here.
              });
              </pre>

          %li
            %a{ :href => '/dataset/api/Miso.Dataset.html#eachColumn' }
              <code>ds.eachColumn(iterator, context)</code>
            %br
            Iterates over available columns (not including _id column.)
            :plain
              <pre>
              ds.eachColumn(function(columnName, column, index) {
                // do what you need here.
              });
              </pre>

    %h3 Data Views
    %p
      Dataset offers a pretty versatile selection mechanism. To allow for an interface identical to your
      Dataset's instance, while operating on a subset we return a DataView object.
      A DataView functions very much like Dataset (in fact Dataset inherits from DataView).
      The major difference is that DataViews are <b>immutable</b> - they
      do not offer any way to change the selected data. This is because they are tied to the original data.

    %div.indent-1
      %p
        The methods that give you DataView objects:

        %ul
          %li
            %a{ :href => '/dataset/api/Miso.Dataset.DataView.html#where' }
              <code>ds.where(filter, options)</code>
            %br
            Returns a subset of rows that meet the specified filter requirement.
          %li
            %a{ :href => '/dataset/api/Miso.Dataset.DataView.html#columns' }
              <code>ds.columns(nameArray)</code>
            %br
            Returns a subset of columns. Shorthand for <code>ds.where({ columns : nameArray })</code>
          %li
            %a{ :href => '/dataset/api/Miso.Dataset.DataView.html#rows' }
              <code>ds.rows(rowFilter, options)</code>
            %br
            Returns a subset of rows. Shorthand for <code>ds.where({ rows : rowFilter })</code>
          %li
            <code>dv.parent</code>
            %br
            Assume dv is an existing selection that was created using one of the above methods.
            Calling <code>parent</code> returns a handle to the original parent dataset or dataview
            from which this selection was created.

    %h4 Synchronization
    %p
      By default, a selection does not maintain a direct relationship to the data if the original data is changed. For
      example, if you try to select all rows where a particualr column's value is even and then change a row that matched
      the original selection to no longer match it, the DataView returned by the selection <b>will</b> still contain it.
      To prevent this from happening, you can indicate that all DataViews created from a Dataset (or other DataViews!) should
      sync with the original data. You can do that by setting the <code>sync</code> property to <code>true</code> when
      initializing your Dataset. For example:

      = toRunnableCodeBlock("dataset/access/sync.js")

    %a{ :href => '/dataset/tutorials/data_types', :style => 'float:left;' }
      %h2
        &laquo; Data Types

    %a{ :href => '/dataset/tutorials/events', :style => 'float:right;' }
      %h2
        Syncronization & Events &raquo;
