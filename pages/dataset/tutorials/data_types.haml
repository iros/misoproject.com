- @page_title = "The Miso Project :: Dataset :: Tutorials"
- @layout = "dataset"

%article.dataset
  %section.tutorial
    %h2 
      Data Columns & Types
    %p
      A Dataset is made up of Miso.Dataset.Column objects, that each have a name, type and corresponding data. More about
      the Miso.Dataset.Column type can be found <a href="/dataset/api.html#misocolumn">in the API Docs</a>.
    %p
      By default, unless specified otherwise, Dataset will attempt to detect the column type itself by
      looking through the first few rows of the data and checking which type it fits under.
    %div.indent-1 
      Dataset has some prebuild Miso.Dataset.types:
      %ul
        %li <code>number</code>
        %li <code>string</code>
        %li <code>boolean</code>
        %li <code>time</code>

    %h3 Overriding Detected Types

    %p
      Dataset will attempt to detect what the type of your data is. However, it is more efficient to just
      tell it what your column types are and if any of your columns are of a <code>time</code> format, 
      it's important to specify the format the time will be coming in as.
      To specify the type of a column, set the <code>columns</code> property like so:

    :plain
      <pre>
      columns : [
        { name : 'columnName', 
          type : '<known type (see Types Sections)>',
          â€¦ any additional optional type required properties here.
        }
      ]
      </pre>

    %p
      Dataset will take care of the actual type coercion, making it trivial to convert strings to 
      numbers or timestamps to <code>moment</code> objects. For example, coercing an incoming 
      timestamp string column into a time column and the total column to a numeric 
      type would look like so:

      = toRunnableCodeBlock("dataset/types/dataType")

    %h3 Custom Types
    %p
      The type system itself can be extended to add new types for your data.
      The current type set is defined in <code>src/types.js</code>.
    %p
      To define a new type, the required signature is as follows:
      = toDisplayCodeBlock("dataset/types/customTypeSignature")

    %p
      For example, we might define a custom <code>phone</code> type like so:
      = toRunnableCodeBlock("dataset/types/phoneType", "customPhoneType")
      = toCleanupCodeBlock("dataset/types/phoneTypeCleanup", "customPhoneType")

    %a{ :href => '/dataset/tutorials/livedata', :style => 'float:left;' }
      %h2
        &laquo; Working with Live Data

    %a{ :href => '/dataset/tutorials/accessing_data', :style => 'float:right;' }
      %h2
        Accessing Data &raquo;