- @page_title = "The Miso Project :: Dataset :: Tutorials"
- @layout = "dataset"

%article.dataset
  %section.tutorial
    %h2
      Derived Dataset
    %p
      Another pretty common operation is to transform the dataset into another dataset according
      to a method of some kind, such as grouping rows according to some criteria. When a dataset 
      undergoes a transoformation like that we call it a derivative. There are currently only two 
      basic derivatives available in Dataset with the plan to add more as they are needed: groupBy 
      and movingAverage.

    %h3 GroupBy

    %p
      A groupBy operation involves splitting the data into groups based on a specific column,
      applying a function to the rows in each group and combining the results into a single dataset.

    %p
      For example, when grouping the following dataset by the "state" column:
      %table
        %tr
          %th state
          %th value
        %tr
          %td MA
          %td 130000
        %tr
          %td MA
          %td 420
        %tr
          %td AZ
          %td 2900
        %tr
          %td AZ
          %td 4
    %p
      The result of the call:
      %pre ds.groupBy("state", ["value"]);

      %table
        %tr
          %th state
          %th value
        %tr
          %td MA
          %td 130420
        %tr
          %td AZ
          %td 2904
    %p
      By default the groupBy will sum up the values in the rows, but you can pass any method as an options argument like so:

      = toRunnableCodeBlock("dataset/derived/customMethod.js")

    %h3 CountBy

    %p
      A countBy operation involves counting the number of occurances of each unique value in a specified column. Those values
      are then set as another column called "count."

    %p
      For example, when counting the following dataset by the "state" column:
      %table
        %tr
          %th state
          %th value
        %tr
          %td MA
          %td 130000
        %tr
          %td MA
          %td 420
        %tr
          %td AZ
          %td 2900
        %tr
          %td AZ
          %td 4

    %p
      The result of the call:
      %pre ds.countBy("state");

      %table
        %tr
          %th state
          %th count
        %tr
          %td MA
          %td 2
        %tr
          %td AZ
          %td 2

    %h3 Moving Average

    %p
      A moving average of size N is a new sequence that is computed by taking the mean (or any other method) of the subsequences of N terms. For example, taking the moving average with a window size of 3 of the following dataset:
      %table
        %tr
          %th key
          %th value
        %tr
          %td A
          %td 130000
        %tr
          %td B
          %td 420
        %tr
          %td C
          %td 1000
        %tr
          %td D
          %td 200      
        %tr
          %td E
          %td 2900
        %tr
          %td F
          %td 4

    %p
      Like so:
      %pre
        ds.movingAverage("value");

      Will result in the following table:
      %table
        %tr
          %th key
          %th value
          %th (explanation - NOT IN TABLE)
        %tr
          %td C
          %td= (130000 + 420 + 1000)/3
          %td="(130000 + 420 + 1000)/3"
        %tr
          %td D
          %td= (420 + 1000 + 200)/3
          %td="(420 + 1000 + 200)/3"
        %tr
          %td E
          %td= (1000 + 200 + 2900)/3
          %td="(1000 + 200 + 2900)/3"
        %tr
          %td F
          %td= (200 + 2900 + 4)/3
          %td="(200 + 2900 + 4)/3"
    %p
      Note that you can also specify multiple columns like so:
      %pre
        ds.movingAverage(["A", "B", "C"]);
      And an alternate method like so:
      %pre
        ds.movingAverage(["A", "B", "C"], { method : _.sum });
      
    %h3 Syncing Behavior
    %p
      If you are creating a derived dataset from a dataset that is syncable, you can
      subscribe to derived dataset's<code>change</code> event. 
    %p
      Because of the inherent nature of a derived dataset, even the smallest change in your original data can cause many changes in your derived dataset. At the moment, those changes are not encompased in a set of deltas. Instead, the derived dataset gets recomputed. This is an expensive operation, but it reduces the code complexity substantially. We are open to discussing a better way of handling this situation, but for now, this works.
          
    %a{ :href => '/dataset/tutorials/products', :style => 'float:left;' }
      %h2
        &laquo; Computed Values